# THINK ABOUT IT:
    #
    # Is it better to use
    #    obj.nil?
    # or
    #    obj == nil
    # Why?
**************************************************************
ok)
# non  capisco gli ultimi tre assert:
# sia 4 che 5 sono out of bound ma con 5 torna nil e con 4 []
def test_slicing_arrays
    array = [:peanut, :butter, :and, :jelly]

    assert_equal [:peanut], array[0,1]
    assert_equal [:peanut, :butter], array[0,2]
    assert_equal [:and, :jelly], array[2,2]
    assert_equal [:and, :jelly], array[2,20]
    assert_equal [], array[4,0]
    assert_equal [], array[4,100]
    assert_equal nil, array[5,0]
  end
 Spiegazione:
 http://www.ruby-doc.org/core-1.9.3/Array.html
 http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/380637
 usando il metodo a.slice non si indicizzano gli elementi ma piuttosto gli "spazi"
 tra gli elementi: questo esempio è esplicativo: 
 
   t = 'hi'
  t[0,0] = '('
  t[3,0] = ')'
  t
=> "(hi)"

**************************************************************
  
  
ok )
studiare shift:
torna il primo elemento e lo toglie
unshift: inserisce un elemento in aray[0]
**************************************************************

# Why might you want to use #fetch instead of #[] when accessing hash keys?
Risposta:
#[] torna nil se la hash non contiene la key cercata fetch solleva un'eccezione 
quindi con #[] non è possibile distinguere tra un valore nil e un valore non presente.

**************************************************************
expected = { :one => "eins", :two => "dos" }
    assert_equal true, expected == hash

Bonus Question: Why was "expected" broken out into a variable
    # rather than used as a literal?

non esiste un metodo del tipo: assert_equal {:a => "A", :b => "B"}, expected,
si potrebbe usare assert_equal true, {:a => "A", :b => "B"} == expected,
ma sarebbe meno leggibile che assegnare una variabile

**************************************************************
 def test_symbols_with_spaces_can_be_built
    symbol = :"cats and dogs"

    assert_equal symbol, :"cats and dogs".to_sym
  end
Perplessità:
symbol.is_a? Symbol  -> true
quindi a cosa serve .to_sym ? Troverei più sensato il test scritto così:
 def test_symbols_with_spaces_can_be_built_2
    string = "cats and dogs"
	symbol = string.to_sym
    assert_equal symbol, :"cats and dogs"
  end
**************************************************************
Why is it not a good idea to dynamically create a lot of symbols?
La memoria occupata dai simboli viene allocata solo al termine del programma

**************************************************************
RegEx:
operatori "greedy" (=ingordi) sono quelli che tendono a ripetere più spesso possibile 
il token che lo precede

**************************************************************
#Describe in your own words what inject does
itera eseguendo il codice passato nel blocco avendo come valore iniziale quello specificato
come parametro. L'operazione specificata nel codice deve essere binaria.

**************************************************************
# Bonus Question:  In the previous koan, we saw the construct
#   File.open(filename) do |file|
  #     # code to read 'file'
  #   end
  #
  # Why did we do it that way instead of the following?
  #
  #   file = File.open(filename)
  #   # code to read 'file'

La prima versione limita l'apertura del file al blocco, la seconda lo assegna alla
variabile "file" che dovrà essere usata per chiuderlo esplicitamente.

**************************************************************
scoring_project

procedimento:
1) ho implementato con if finché ci sono riuscito
2) ho scritto una versione funzionante usando un array e, un test dopo l'altro ho migliorato il codice
3) ho migliorato le prestazioni utilizzando una hash

**************************************************************




